{"version":3,"sources":["components/MovieSearch.js","components/MoviePage.js","components/ShowMovies.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["MovieSearch","title","onClickHandler","useState","movies","setMovies","url","setUrl","clickFunc","useCallback","id","useEffect","a","async","fetch","then","response","json","responseJSON","catch","err","console","log","Error","hasOwnProperty","index","moviesList","Search","map","e","Title","Year","imdbID","Type","Poster","caption","idComp","className","key","onClick","src","alt","MoviePage","movieId","isFav","isWatched","addToFav","addToWatched","ratingsIcons","movie","setMovie","addToFavourites","addToWatchedFilms","ratings","Ratings","Value","Runtime","Plot","Director","Writer","Genre","Country","Released","Rated","Actors","ShowMovies","elements","favourites","watch","setFavs","setWatched","includes","length","NavBar","onChangeHandler","onClickFunc","type","onChangeFunc","placeholder","onChange","target","value","App","search","setSearch","setMovieId","JSON","parse","localStorage","getItem","favs","watched","viewed","setViewed","whichPage","setWhichPage","setItem","stringify","chooseMovie","filter","pageItems","page","navBar","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c0cff2a.chunk.js","sourcesContent":["import React, {useState, useEffect, useCallback} from 'react';\r\nimport './MovieSearch.css';\r\n\r\n\r\nfunction MovieSearch({title, onClickHandler}){\r\n\r\n    const [movies, setMovies] = useState(null);\r\n    const [url, setUrl] = useState(`https://movie-database-imdb-alternative.p.rapidapi.com/?page=1&r=json&s=${title}`);\r\n\r\n    const clickFunc = useCallback((id) =>{\r\n        onClickHandler(id);\r\n    }, [onClickHandler]);\r\n\r\n    useEffect(() => {\r\n        setUrl(`https://movie-database-imdb-alternative.p.rapidapi.com/?page=1&r=json&s=${title}`);\r\n    }, [title]);\r\n\r\n    useEffect(() => {\r\n        const defFetch = async () => {\r\n            fetch(url, {\r\n\t                \"method\": \"GET\",\r\n\t                \"headers\": {\r\n\t\t            \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\",\r\n\t\t            \"x-rapidapi-key\": \"4d1910cdadmsh451bc57530aeb39p1a93ebjsn853bad1781c1\"\r\n\t        }\r\n            })\r\n            .then(async (response) => {\r\n                const responseJSON = await response.json();\r\n                setMovies(responseJSON);\r\n            })\r\n            .catch(err => {\r\n\t            console.log(new Error(err));\r\n            });\r\n        }\r\n        defFetch();\r\n    }, [url]);\r\n\r\n    if(movies !== null){\r\n        if(!movies.hasOwnProperty(\"Error\")){\r\n            let index = 0;\r\n            const moviesList = movies.Search.map(e => {\r\n                const {Title, Year, imdbID, Type, Poster} = e;\r\n                const caption = `${Title}, ${Year}, ${Type}`;\r\n                const idComp = `${imdbID} + ${index}`;\r\n                index++;\r\n                return <div className=\"poster\" key={idComp} onClick = {() => clickFunc(imdbID)} >\r\n                    <div className=\"overlay\" >\r\n                        <img src={Poster} alt={caption} />\r\n                        <a className=\"link\"><p>{Title}</p><p>{Year}</p></a>\r\n                    </div>\r\n                </div>\r\n            });\r\n            return <div className=\"moviesList\">{moviesList}</div>\r\n        }\r\n        else{\r\n            return <p>Find a movie...</p>\r\n        }\r\n    }\r\n    else{\r\n        return <p>Find a movie...</p>\r\n    }\r\n}\r\n\r\nexport default MovieSearch;","import React, {useEffect, useState, useCallback} from 'react';\r\nimport {IoMdEye, IoIosHeart} from 'react-icons/io';\r\nimport './MoviePage.css';\r\n\r\n\r\nfunction MoviePage({movieId, isFav, isWatched, addToFav, addToWatched}){\r\n\r\n    const ratingsIcons = {\"Internet Movie Database\": [\"https://icons-for-free.com/iconfiles/png/512/films+imdb+internet+movie+database+movie+television+icon-1320192452769839815.png\", 0],\r\n                          \"Rotten Tomatoes\": [\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/5b/Rotten_Tomatoes.svg/1009px-Rotten_Tomatoes.svg.png\", 1],\r\n                          \"Metacritic\": [\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/20/Metacritic.svg/768px-Metacritic.svg.png\", 2]\r\n        };\r\n    const [movie, setMovie] = useState({\r\n        \"Title\":\"\",\r\n        \"Year\":\"\",\r\n        \"Rated\":\"\",\r\n        \"Released\":\"\",\r\n        \"Runtime\":\"\",\r\n        \"Genre\":\"\",\r\n        \"Director\":\"\",\r\n        \"Writer\":\"\",\r\n        \"Actors\":\"\",\r\n        \"Plot\":\"\",\r\n        \"Language\":\"\",\r\n        \"Country\":\"\",\r\n        \"Awards\":\"\",\r\n        \"Poster\":\"\",\r\n        \"Ratings\":[\r\n        {\r\n        \"Source\":\"Internet Movie Database\",\r\n        \"Value\":\"\"\r\n        },\r\n        {\r\n        \"Source\":\"Rotten Tomatoes\",\r\n        \"Value\":\"\"\r\n        },\r\n        {\r\n        \"Source\":\"Metacritic\",\r\n        \"Value\":\"\"\r\n        }],\r\n        \"Metascore\":\"\",\r\n        \"imdbRating\":\"\",\r\n        \"imdbVotes\":\"\",\r\n        \"imdbID\":\"\",\r\n        \"Type\":\"\",\r\n        \"DVD\":\"\",\r\n        \"BoxOffice\":\"\",\r\n        \"Production\":\"\",\r\n        \"Website\":\"\",\r\n        \"Response\":\"\",\r\n        });\r\n\r\n    const addToFavourites = useCallback((id) => { \r\n        addToFav(id);\r\n    }, [addToFav]);\r\n\r\n    const addToWatchedFilms = useCallback((id) => {\r\n            addToWatched(id);\r\n    }, [addToWatched]);\r\n\r\n    useEffect(() => {\r\n        const fetchMovieData = async () => {\r\n            fetch(`https://movie-database-imdb-alternative.p.rapidapi.com/?i=${movieId}&r=json`, {\r\n\t            \"method\": \"GET\",\r\n\t            \"headers\": {\r\n\t\t        \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\",\r\n\t\t    \"x-rapidapi-key\": \"4d1910cdadmsh451bc57530aeb39p1a93ebjsn853bad1781c1\"\r\n\t        }\r\n        })\r\n        .then(async (response) => {\r\n            const responseJSON = await response.json();\r\n            setMovie(responseJSON);\r\n        })\r\n        .catch(err => {\r\n\t        console.log(err);\r\n        });\r\n        }\r\n        fetchMovieData();\r\n    }, [movieId]);\r\n\r\n    const ratings = (() => {\r\n        if(movie !== null){\r\n            if(movie.hasOwnProperty(\"Ratings\")){\r\n                return movie.Ratings.map(e => {\r\n                    return <div className=\"ratingsInfo\" key={`ratingsIcon${ratingsIcons[e[\"Source\"]][1]}`}>\r\n                        <img src={ratingsIcons[e[\"Source\"]][0]} alt=\"\" />\r\n                        <span>{e.Value}</span>\r\n                    </div>;\r\n                });\r\n            }\r\n            else{\r\n                return <p>No ratings available</p>;\r\n            }\r\n        }\r\n        else{\r\n            return <p>No ratings available</p>;\r\n        }\r\n    })();\r\n\r\n    return (\r\n        <div className=\"movieData\">\r\n            <div className=\"gridPoster\">\r\n                <img src={movie.Poster} alt=\"\" />\r\n                <div className=\"watchFav\">\r\n                    <div className={(isWatched === true) ? \"eyeIcon_select\" : \"eyeIcon\"} onClick={() => addToWatchedFilms(movieId) }><IoMdEye /></div>\r\n                    <div className={(isFav === true) ? \"heartIcon_select\" : \"heartIcon\"} onClick={() => addToFavourites(movieId) }><IoIosHeart /></div>\r\n                </div>\r\n            </div>\r\n            <div className=\"movieDetails\">\r\n                <h1>{movie.Title} ({movie.Year})</h1>\r\n                <p className=\"movieRuntime\">{movie.Runtime}</p>\r\n                <div className=\"ratingsMovie\">\r\n                    {ratings}\r\n                </div>\r\n                <p className=\"moviePlot\">{movie.Plot}</p>\r\n                <div className=\"movieInfo\">\r\n                <div className=\"movieInfoElem\"><span>Director: </span><p>{movie.Director}</p></div>\r\n                    <div className=\"movieInfoElem\"><span>Writer: </span><p>{movie.Writer}</p></div>\r\n                    <div className=\"movieInfoElem\"><span>Genre: </span><p>{movie.Genre}</p></div>\r\n                    <div className=\"movieInfoElem\"><span>Country: </span><p>{movie.Country}</p></div>\r\n                    <div className=\"movieInfoElem\"><span>Released: </span><p>{movie.Released}</p></div>\r\n                    <div className=\"movieInfoElem\"><span>Rating: </span><p>{movie.Rated}</p></div>\r\n                    <div className=\"movieInfoElem\"><span>Cast: </span><p>{movie.Actors}</p></div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MoviePage;","import React from 'react';\r\nimport MoviePage from './MoviePage.js';\r\nimport './ShowMovies.css';\r\n\r\n\r\nfunction ShowMovies({elements, favourites, watch, setFavs, setWatched}){\r\n\r\n       \r\n    const movies = (() => elements.map(e => {\r\n        return <MoviePage key={e} movieId={e} isFav={favourites.includes(e)} isWatched={watch.includes(e)} addToWatched={setWatched} addToFav={setFavs} />;\r\n    }))();\r\n\r\n    return(\r\n        <div className=\"moviesSet\">\r\n            <h2>The amount of found titles: {elements.length}</h2>\r\n            {movies}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowMovies;\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './NavBar.css';\r\n\r\nfunction NavBar({onClickHandler, onChangeHandler}){\r\n\r\n    const onClickFunc = useCallback((type) => {\r\n        onClickHandler(type);\r\n    }, [onClickHandler]);\r\n\r\n    const onChangeFunc = useCallback((e) => {\r\n        onChangeHandler(e);\r\n    }, [onChangeHandler]);\r\n// //onChange={e => {setSearch(e.target.value); setMovieId(\"\"); setWhichPage(\"search\")}} />\r\n    return (\r\n    <nav>\r\n        <input type=\"text\"  placeholder=\"Type a title of a movie...\" onChange={e => {onChangeFunc(e.target.value)}} /> \r\n        <ul>\r\n          <li onClick={() => onClickFunc(\"favs\")}>Favourites</li>\r\n          <li onClick={()=> onClickFunc(\"watched\")}>Watched</li>\r\n          <li onClick={()=> onClickFunc(\"viewed\")}>Recently viewed</li>\r\n        </ul>\r\n    </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport MovieSearch from './components/MovieSearch.js';\nimport ShowMovies from './components/ShowMovies.js';\nimport NavBar from './components/NavBar.js';\n\n\nfunction App() {\n\n  const [search, setSearch] = useState(\"\");\n  const [movieId, setMovieId] = useState(\"\");\n  const [favs, setFavs] = useState(JSON.parse(localStorage.getItem('favs')) || []);\n  const [watched, setWatched] = useState(JSON.parse(localStorage.getItem('watched')) || []);\n  const [viewed, setViewed] = useState([]);\n\n  const [whichPage, setWhichPage] = useState(\"search\");\n\n  useEffect(() => {\n    localStorage.setItem('favs', JSON.stringify(favs));\n  }, [favs]);\n\n  useEffect(() => {\n    localStorage.setItem('watched', JSON.stringify(watched));\n  }, [watched]);\n\n\n  const chooseMovie = (id) => {\n    setMovieId(id);\n    setViewed([id, ...viewed]);\n    setWhichPage(\"moviePage\");\n  }\n\n  const addToWatchedFilms = (id) => {\n    if(!watched.includes(id)){\n      setWatched([id, ...watched]);\n    }\n    else{\n      setWatched(watched.filter(e => e !== id));\n    }\n    setWhichPage(whichPage);\n  }\n\n  const addToFavourites = (id) => {\n    if(!favs.includes(id)){\n      setFavs([id, ...favs]);\n    }\n    else{\n      setFavs(favs.filter(e => e !== id));\n    }\n    setWhichPage(whichPage);\n  }\n\n  const selectPage = (type) => {\n    setWhichPage(type);\n  };\n\n  const changeInput = (e) => {\n    setSearch(e); \n    setMovieId(\"\"); \n    setWhichPage(\"search\");\n  };\n\n  const pageItems = {\"favs\": favs, \"watched\": watched, \"viewed\": viewed};\n\n  const page = (()=> {\n    switch(whichPage){\n      case \"search\":\n        return <MovieSearch title={search} onClickHandler={chooseMovie} />;\n      case \"moviePage\":\n        return <ShowMovies elements={[movieId]} favourites={favs} watch={watched} setFavs={addToFavourites} setWatched={addToWatchedFilms} />;\n      default:\n        return <ShowMovies elements={pageItems[whichPage]} favourites={favs} watch={watched} setFavs={addToFavourites} setWatched={addToWatchedFilms} />;\n    }\n    \n  })();\n\n  const navBar = <header>\n      <NavBar onClickHandler={selectPage} onChangeHandler = {changeInput} />\n  </header>;\n\n  return (\n    <div className=\"App\">\n      {navBar}\n      <main>\n          {page}\n      </main>    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}